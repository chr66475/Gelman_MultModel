b.hat.M2 <- lme4::fixef(M2)[2]
par (mfrow=c(2,4), mar=c(4,4,3,1), oma=c(1,1,2,1))
for (j in display8){
plot (x.jitter[county==j], y[county==j], xlim=c(-.05,1.05), ylim=y.range,
xlab="floor", ylab="log radon level", cex.lab=1.2, cex.axis=1.1,
pch=20, mgp=c(2,.7,0), xaxt="n", yaxt="n", cex.main=1.1, main=uniq[j])
axis (1, c(0,1), mgp=c(2,.7,0), cex.axis=1.1)
axis (2, seq(-1,3,2), mgp=c(2,.7,0), cex.axis=1.1)
curve (a.hat.M1[j,] + b.hat.M1*x, lwd=.5, col="gray10", add=TRUE)
curve (a.hat.M2[j,] + b.hat.M2*x, lwd=1, col="black", add=TRUE)
}
# Plot of ests & se's vs. county uranium (Figure 12.6)
a.se.M2 <- arm::se.coef(M2)$county
par (mar=c(5,5,4,2)+.1)
plot (u, t(a.hat.M2), cex.lab=1.2, cex.axis=1.1,
xlab="county-level uranium measure", ylab="est. regression intercept", pch=20,
ylim=c(0.5,2.0), yaxt="n", xaxt="n", mgp=c(3.5,1.2,0))
axis (1, seq(-1,1,.5), cex.axis=1.1, mgp=c(3.5,1.2,0))
axis (2, cex.axis=1.1, mgp=c(3.5,1.2,0))
curve (lme4::fixef(M2)["(Intercept)"] + lme4::fixef(M2)["u.full"]*x, lwd=1, col="black", add=TRUE)
for (j in 1:J){
lines (rep(u[j],2), a.hat.M2[j,] + c(-1,1)*a.se.M2[j,], lwd=.5, col="gray10")
}
## Election forecasting example
model.1 <- lm (vote.88 ~ vote.86 + party.88 + inc.88)
View(raw_vote_presvote)
View(raw_vote_polls_sub)
View(raw_vote_polls)
View(raw_vote_census88)
## Read & clean the election data
# Data are at http://www.stat.columbia.edu/~gelman/arm/examples/?
data?
## Election forecasting example
model.1 <- lm (vote.88 ~ vote.86 + party.88 + inc.88)
View(raw_vote_census88)
View(raw_vote_polls)
View(raw_vote_polls_sub)
raw_vote_polls_sub <- read.table(here::here('data',
'raw_data',
'election88',
'polls.subset.dat'),
header = TRUE,
sep = ".")
View(raw_vote_polls)
View(raw_vote_polls_sub)
raw_vote_polls_sub <- read.table(here::here('data',
'raw_data',
'election88',
'polls.subset.dat'),
header = TRUE,
sep = "/t")
raw_vote_polls_sub <- read.table(here::here('data',
'raw_data',
'election88',
'polls.subset.dat'),
header = TRUE,
sep = "\t")
View(raw_vote_polls_sub)
library (foreign)
polls <- read.dta ("polls.dta")
View(raw_vote_polls)
# Set up the data for the election88 example
# Load in data for region indicators
# Use "state", an R data file (type ?state from the R command window for info)
#
# Regions:  1=northeast, 2=south, 3=north central, 4=west, 5=d.c.
# We have to insert d.c. (it is the 9th "state" in alphabetical order)
data (state)                  # "state" is an R data file
state.abbr <- c (state.abb[1:8], "DC", state.abb[9:50])
dc <- 9
not.dc <- c(1:8,10:51)
region <- c(3,4,4,3,4,4,1,1,5,3,3,4,4,2,2,2,2,3,3,1,1,1,2,2,3,2,4,2,4,1,1,4,1,3,2,2,3,4,1,1,3,2,3,3,4,1,3,4,1,2,4)
# Load in data from the CBS polls in 1988
library (foreign)
polls <- read.dta ("polls.dta")
# Set up the data for the election88 example
# Load in data for region indicators
# Use "state", an R data file (type ?state from the R command window for info)
#
# Regions:  1=northeast, 2=south, 3=north central, 4=west, 5=d.c.
# We have to insert d.c. (it is the 9th "state" in alphabetical order)
data (state)                  # "state" is an R data file
state.abbr <- c (state.abb[1:8], "DC", state.abb[9:50])
dc <- 9
not.dc <- c(1:8,10:51)
region <- c(3,4,4,3,4,4,1,1,5,3,3,4,4,2,2,2,2,3,3,1,1,1,2,2,3,2,4,2,4,1,1,4,1,3,2,2,3,4,1,1,3,2,3,3,4,1,3,4,1,2,4)
# Load in data from the CBS polls in 1988
library (foreign)
polls <- read.dta (here::here('data',
'raw_data',
'election88',
'polls.dta'))
attach.all (polls)
attach.all(polls)
R2OpenBUGS::attach.all(polls)
# Set up the data for the election88 example
# Load in data for region indicators
# Use "state", an R data file (type ?state from the R command window for info)
#
# Regions:  1=northeast, 2=south, 3=north central, 4=west, 5=d.c.
# We have to insert d.c. (it is the 9th "state" in alphabetical order)
data (state)                  # "state" is an R data file
state.abbr <- c (state.abb[1:8], "DC", state.abb[9:50])
dc <- 9
not.dc <- c(1:8,10:51)
region <- c(3,4,4,3,4,4,1,1,5,3,3,4,4,2,2,2,2,3,3,1,1,1,2,2,3,2,4,2,4,1,1,4,1,3,2,2,3,4,1,1,3,2,3,3,4,1,3,4,1,2,4)
# Load in data from the CBS polls in 1988
library (foreign)
polls <- read.dta (here::here('data',
'raw_data',
'election88',
'polls.dta'))
R2OpenBUGS::attach.all(polls)
# Select just the data from the last survey (#9158)
table (survey)                # look at the survey id's
ok <- survey==9158            # define the condition
polls.subset <- polls[ok,]    # select the subset of interest
attach.all (polls.subset)     # attach the subset
# Set up the data for the election88 example
# Load in data for region indicators
# Use "state", an R data file (type ?state from the R command window for info)
#
# Regions:  1=northeast, 2=south, 3=north central, 4=west, 5=d.c.
# We have to insert d.c. (it is the 9th "state" in alphabetical order)
data (state)                  # "state" is an R data file
state.abbr <- c (state.abb[1:8], "DC", state.abb[9:50])
dc <- 9
not.dc <- c(1:8,10:51)
region <- c(3,4,4,3,4,4,1,1,5,3,3,4,4,2,2,2,2,3,3,1,1,1,2,2,3,2,4,2,4,1,1,4,1,3,2,2,3,4,1,1,3,2,3,3,4,1,3,4,1,2,4)
# Load in data from the CBS polls in 1988
library (foreign)
polls <- read.dta (here::here('data',
'raw_data',
'election88',
'polls.dta'))
R2OpenBUGS::attach.all(polls)
# Select just the data from the last survey (#9158)
table (survey)                # look at the survey id's
ok <- survey==9158            # define the condition
polls.subset <- polls[ok,]    # select the subset of interest
R2OpenBUGS::attach.all (polls.subset)     # attach the subset
write.table (polls.subset, "polls.subset.dat")
print (polls.subset[1:5,])
# define other data summaries
y <- bush                  # 1 if support bush, 0 if support dukakis
n <- length(y)             # of survey respondents
n.age <- max(age)          # of age categories
n.edu <- max(edu)          # of education categories
n.state <- max(state)      # of states
n.region <- max(region)    # of regions
# compute unweighted and weighted averages for the U.S.
ok <- !is.na(y)                                    # remove the undecideds
cat ("national mean of raw data:", round (mean(y[ok]==1), 3), "\n")
cat ("national weighted mean of raw data:",
round (sum((weight*y)[ok])/sum(weight[ok]), 3), "\n")
# compute weighted averages for the states
raw.weighted <- rep (NA, n.state)
names (raw.weighted) <- state.abbr
for (i in 1:n.state){
ok <- !is.na(y) & state==i
raw.weighted[i] <- sum ((weight*y)[ok])/sum(weight[ok])
}
# load in 1988 election data as a validation check
election88 <- read.dta ("election88.dta")
# Set up the data for the election88 example
# Load in data for region indicators
# Use "state", an R data file (type ?state from the R command window for info)
#
# Regions:  1=northeast, 2=south, 3=north central, 4=west, 5=d.c.
# We have to insert d.c. (it is the 9th "state" in alphabetical order)
data (state)                  # "state" is an R data file
state.abbr <- c (state.abb[1:8], "DC", state.abb[9:50])
dc <- 9
not.dc <- c(1:8,10:51)
region <- c(3,4,4,3,4,4,1,1,5,3,3,4,4,2,2,2,2,3,3,1,1,1,2,2,3,2,4,2,4,1,1,4,1,3,2,2,3,4,1,1,3,2,3,3,4,1,3,4,1,2,4)
# Load in data from the CBS polls in 1988
library (foreign)
polls <- read.dta (here::here('data',
'raw_data',
'election88',
'polls.dta'))
R2OpenBUGS::attach.all(polls)
# Select just the data from the last survey (#9158)
table (survey)                # look at the survey id's
ok <- survey==9158            # define the condition
polls.subset <- polls[ok,]    # select the subset of interest
R2OpenBUGS::attach.all (polls.subset)     # attach the subset
write.table (polls.subset, "polls.subset.dat")
print (polls.subset[1:5,])
# define other data summaries
y <- bush                  # 1 if support bush, 0 if support dukakis
n <- length(y)             # of survey respondents
n.age <- max(age)          # of age categories
n.edu <- max(edu)          # of education categories
n.state <- max(state)      # of states
n.region <- max(region)    # of regions
# compute unweighted and weighted averages for the U.S.
ok <- !is.na(y)                                    # remove the undecideds
cat ("national mean of raw data:", round (mean(y[ok]==1), 3), "\n")
cat ("national weighted mean of raw data:",
round (sum((weight*y)[ok])/sum(weight[ok]), 3), "\n")
# compute weighted averages for the states
raw.weighted <- rep (NA, n.state)
names (raw.weighted) <- state.abbr
for (i in 1:n.state){
ok <- !is.na(y) & state==i
raw.weighted[i] <- sum ((weight*y)[ok])/sum(weight[ok])
}
# load in 1988 election data as a validation check
election88 <- read.dta (here::here('data',
'raw_data',
'election88',
'election88.dta'))
outcome <- election88$electionresult
# load in 1988 census data
census <- read.dta ("census88.dta")
# Set up the data for the election88 example
# Load in data for region indicators
# Use "state", an R data file (type ?state from the R command window for info)
#
# Regions:  1=northeast, 2=south, 3=north central, 4=west, 5=d.c.
# We have to insert d.c. (it is the 9th "state" in alphabetical order)
data (state)                  # "state" is an R data file
state.abbr <- c (state.abb[1:8], "DC", state.abb[9:50])
dc <- 9
not.dc <- c(1:8,10:51)
region <- c(3,4,4,3,4,4,1,1,5,3,3,4,4,2,2,2,2,3,3,1,1,1,2,2,3,2,4,2,4,1,1,4,1,3,2,2,3,4,1,1,3,2,3,3,4,1,3,4,1,2,4)
# Load in data from the CBS polls in 1988
library (foreign)
polls <- read.dta (here::here('data',
'raw_data',
'election88',
'polls.dta'))
R2OpenBUGS::attach.all(polls)
# Select just the data from the last survey (#9158)
table (survey)                # look at the survey id's
ok <- survey==9158            # define the condition
polls.subset <- polls[ok,]    # select the subset of interest
R2OpenBUGS::attach.all (polls.subset)     # attach the subset
write.table (polls.subset, "polls.subset.dat")
print (polls.subset[1:5,])
# define other data summaries
y <- bush                  # 1 if support bush, 0 if support dukakis
n <- length(y)             # of survey respondents
n.age <- max(age)          # of age categories
n.edu <- max(edu)          # of education categories
n.state <- max(state)      # of states
n.region <- max(region)    # of regions
# compute unweighted and weighted averages for the U.S.
ok <- !is.na(y)                                    # remove the undecideds
cat ("national mean of raw data:", round (mean(y[ok]==1), 3), "\n")
cat ("national weighted mean of raw data:",
round (sum((weight*y)[ok])/sum(weight[ok]), 3), "\n")
# compute weighted averages for the states
raw.weighted <- rep (NA, n.state)
names (raw.weighted) <- state.abbr
for (i in 1:n.state){
ok <- !is.na(y) & state==i
raw.weighted[i] <- sum ((weight*y)[ok])/sum(weight[ok])
}
# load in 1988 election data as a validation check
election88 <- read.dta (here::here('data',
'raw_data',
'election88',
'election88.dta'))
outcome <- election88$electionresult
# load in 1988 census data
census <- haven::read_dta(here::here('data',
'raw_data',
'election88',
'census88.dta'))
# also include a measure of previous vote as a state-level predictor
library (foreign)
presvote <- read.dta (here::here('data',
'raw_data',
'election88',
'presvote.dta'))
attach (presvote)
v.prev <- presvote$g76.84pr
not.dc <- c(1:8,10:51)
candidate.effects <- read.table ("candidate_effects.dat", header=T)
knitr::opts_chunk$set(echo = TRUE)
# Loading package(s)
library(tidyverse) # For code syntax and other basic tools.
# Loading the raw data (radon).
raw_radon_cty <- read.table(here::here('data',
'raw_data',
'radon',
'cty.dat'),
header = TRUE,
sep = ",")
raw_radon_srrs2 <- read.table(here::here('data',
'raw_data',
'radon',
'srrs2.dat'),
header = TRUE,
sep = ",")
raw_vote_census88 <- haven::read_dta(here::here('data',
'raw_data',
'election88',
'census88.dta'))
raw_vote_polls <- haven::read_dta(here::here('data',
'raw_data',
'election88',
'polls.dta'))
raw_vote_polls_sub <- read.table(here::here('data',
'raw_data',
'election88',
'polls.subset.dat'),
header = TRUE,
sep = "\t")
raw_vote_presvote <- haven::read_dta(here::here('data',
'raw_data',
'election88',
'presvote.dta'))
# Checking the data
head(raw_radon_cty)
summary(raw_radon_cty)
head(raw_radon_srrs2)
summary(raw_radon_srrs2)
# Pulling out response and predictors. See book section 12.2 for specifics.
### Only interested in state = MN. Log response.
mn <- raw_radon_srrs2$state=="MN"
radon <- raw_radon_srrs2$activity[mn]
log.radon <- log (ifelse (radon==0, .1, radon)) # Replaces any 0 with 0.1 so that a log transformation can be performed.
floor <- raw_radon_srrs2$floor[mn]       # 0 for basement, 1 for first floor
n <- length(radon)
y <- log.radon
x <- floor
# get county index variable
county.name <- as.vector(raw_radon_srrs2$county[mn]) # Pulls a list of each county name.
uniq <- unique(county.name) # Reduces the list to non-repeats.
J <- length(uniq) # Gets the number of unique counties.
county <- rep (NA, J) # Creates a new vector county of length J filled with NA values. This vector will be used to store numerical codes for each county.
for (i in 1:J){
county[county.name==uniq[i]] <- i
} # Loop that assigns a unique numerical code (from 1 to J) to each county. It iterates through the unique county names and, for each name, assigns the corresponding code (i) to all elements in the county vector where county.name matches that unique name.
# no predictors
ybarbar = mean(y) # Gets the mean of 'y' which is the log of radon levels. Provides a baseline measure of radon levels.
sample.size <- as.vector (table (county)) # Pulls the number of observations for each county. and creates a table of county for each county and converts it to a vector.
sample.size.jittered <- sample.size*exp (runif (J, -.1, .1)) # Adds some random jitter to sample size.
cty.mns = tapply(y,county,mean) # Gets mean of log-trans radon levels for each county.
cty.vars = tapply(y,county,var) # Gets variance of log-transformed radon levels for each county.
cty.sds = mean(sqrt(cty.vars[!is.na(cty.vars)]))/sqrt(sample.size) # Estimates the standard deviation of county-level means. First, calculates the square root of the variances (standard deviations) for each county, excluding NA values. Takes the mean of these standard deviations and divides it by the square root of sample size of each county. Provides estimate of variability between counties.
cty.sds.sep = sqrt(tapply(y,county,var)/sample.size) # Calculates the standard deviation of log-transformed radon levels within each county. Divides the county-specific variances by the corresponding sample sizes and takes the square root. This provides an estiamte of hte variability within each county.
# varying-intercept model, no predictors
radon.data <- list ("n", "J", "y", "county")
radon.inits <- function (){
list (a=rnorm(J), mu.a=rnorm(1),
sigma.y=runif(1), sigma.a=runif(1))
} # Defines a function that generates initial values for the model parameters and creates a list with the values: 1. a(vector of random normal values for county-specific effects - J values). 2. mu.a(Sing random value for the mean of the county effects). 3. sigma.y(Single random uniform value for the standard deviation of the radon measurements within counties). sigma.a(Single random uniform value for the standard deviation of the county effects).
radon.parameters <- c ("a", "mu.a", "sigma.y", "sigma.a") # Specifies the name of the parameters to be monitored and returned by the model. These are the same parameters for which initial values were defined.
BUGS_DIR <- "C:/Program Files (x86)/OpenBUGS/OpenBUGS323/OpenBUGS.exe"
mlm.radon.nopred <- R2OpenBUGS::bugs(
data = radon.data,
inits = radon.inits,
parameters.to.save = radon.parameters,
n.chains=3,
model.file = "radon.multilevel.nopred.txt",
OpenBUGS.pgm = BUGS_DIR,
n.iter=10,
debug=TRUE
) # Calls the bugs function to run the Bayesian multilevel model. radon.data are the list of data for the model. radon.inits is the function to generate initial values. radon.parameters is the vector of parameter names to monitor. n.chaims = 3 is the number of MCMC chains to run. radon.multilevel.nopred.bu is the name of the WinBUGS model file
## Figure 12.1 (a)
par(mfrow=c(1,2))
plot (sample.size.jittered, cty.mns, cex.lab=.9, cex.axis=1,
xlab="sample size in county j",
ylab="avg. log radon in county j",
pch=20, log="x", cex=.3, mgp=c(1.5,.5,0),
ylim=c(0,3.2), yaxt="n", xaxt="n")
axis (1, c(1,3,10,30,100), cex.axis=.9, mgp=c(1.5,.5,0))
axis (2, seq(0,3), cex.axis=.9, mgp=c(1.5,.5,0))
for (j in 1:J){
lines (rep(sample.size.jittered[j],2),
cty.mns[j] + c(-1,1)*cty.sds[j], lwd=.5)
#         cty.mns[j] + c(-1,1)*mean(cty.sds[!is.na(cty.sds)]), lwd=.5)
}
abline(h=mlm.radon.nopred$median$mu.a)
title("No pooling",cex.main=.9, line=1)
#abline(h=ybarbar)
points(sample.size.jittered[36],cty.mns[36],cex=4)
## Figure 12.1 (b)
plot (sample.size.jittered, mlm.radon.nopred$median$a, cex.lab=.9, cex.axis=1,
xlab="sample size in county j",
ylab="avg. log radon in county j",
pch=20, log="x", cex=.3, mgp=c(1.5,.5,0),
ylim=c(0,3.2), yaxt="n", xaxt="n")
axis (1, c(1,3,10,30,100), cex.axis=.9, mgp=c(1.5,.5,0))
axis (2, seq(0,3), cex.axis=.9, mgp=c(1.5,.5,0))
for (j in 1:J){
lines (rep(sample.size.jittered[j],2),
mlm.radon.nopred$median$a[j] + c(-1,1)*mlm.radon.nopred$sd$a[j],
lwd=.5)
}
abline(h=mlm.radon.nopred$median$mu.a)
points(sample.size.jittered[36],mlm.radon.nopred$median$a[36],cex=4)#,col="red")
title("Multilevel model",cex.main=.9, line=1)
display8 <- c (36, 1, 35, 21, 14, 71, 61, 70)  # counties to be displayed
x.jitter <- x + runif(n,-.05,.05)
display8 <- c (36, 1, 35, 21, 14, 71, 61, 70)  # counties to be displayed
y.range <- range (y[!is.na(match(county,display8))])
## Get the county-level predictor
srrs2.fips <- srrs2$stfips*1000 + srrs2$cntyfips
#cty <- read.table ("cty.dat", header=T, sep=",")
usa.fips <- 1000*raw_radon_cty[,"stfips"] + raw_radon_cty[,"ctfips"]
usa.rows <- match (unique(srrs2.fips[mn]), usa.fips)
uranium <- raw_radon_cty[usa.rows,"Uppm"]
u <- log (uranium)
## Varying-intercept model w/ group-level predictors
u.full <- u[county]
M2 <- lme4::lmer (y ~ x + u.full + (1 | county))
summary (M2)
coef (M2)
lme4::fixef (M2)
lme4::ranef (M2)
## Plots on Figure 12.5
M1 <- lme4::lmer (y ~ x + (1 | county))
a.hat.M1 <- lme4::fixef(M1)[1] + lme4::ranef(M1)$county
b.hat.M1 <- lme4::fixef(M1)[2]
a.hat.M2 <- lme4::fixef(M2)[1] + lme4::fixef(M2)[3]*u + lme4::ranef(M2)$county
b.hat.M2 <- lme4::fixef(M2)[2]
par (mfrow=c(2,4), mar=c(4,4,3,1), oma=c(1,1,2,1))
for (j in display8){
plot (x.jitter[county==j], y[county==j], xlim=c(-.05,1.05), ylim=y.range,
xlab="floor", ylab="log radon level", cex.lab=1.2, cex.axis=1.1,
pch=20, mgp=c(2,.7,0), xaxt="n", yaxt="n", cex.main=1.1, main=uniq[j])
axis (1, c(0,1), mgp=c(2,.7,0), cex.axis=1.1)
axis (2, seq(-1,3,2), mgp=c(2,.7,0), cex.axis=1.1)
curve (a.hat.M1[j,] + b.hat.M1*x, lwd=.5, col="gray10", add=TRUE)
curve (a.hat.M2[j,] + b.hat.M2*x, lwd=1, col="black", add=TRUE)
}
# Plot of ests & se's vs. county uranium (Figure 12.6)
a.se.M2 <- arm::se.coef(M2)$county
par (mar=c(5,5,4,2)+.1)
plot (u, t(a.hat.M2), cex.lab=1.2, cex.axis=1.1,
xlab="county-level uranium measure", ylab="est. regression intercept", pch=20,
ylim=c(0.5,2.0), yaxt="n", xaxt="n", mgp=c(3.5,1.2,0))
axis (1, seq(-1,1,.5), cex.axis=1.1, mgp=c(3.5,1.2,0))
axis (2, cex.axis=1.1, mgp=c(3.5,1.2,0))
curve (lme4::fixef(M2)["(Intercept)"] + lme4::fixef(M2)["u.full"]*x, lwd=1, col="black", add=TRUE)
for (j in 1:J){
lines (rep(u[j],2), a.hat.M2[j,] + c(-1,1)*a.se.M2[j,], lwd=.5, col="gray10")
}
# The lmer function from lme4 package.
## Varying-intercept model with no predictors. (The varying intercept model with no predictors can be fit and displayed using lmer() as follows:)
null_model <- lme4::lmer(formula = y ~ 1 + (1 | county))
arm::display(null_model)
# Set up the data for the election88 example
# Load in data for region indicators
# Use "state", an R data file (type ?state from the R command window for info)
#
# Regions:  1=northeast, 2=south, 3=north central, 4=west, 5=d.c.
# We have to insert d.c. (it is the 9th "state" in alphabetical order)
data (state)                  # "state" is an R data file
state.abbr <- c (state.abb[1:8], "DC", state.abb[9:50])
dc <- 9
not.dc <- c(1:8,10:51)
region <- c(3,4,4,3,4,4,1,1,5,3,3,4,4,2,2,2,2,3,3,1,1,1,2,2,3,2,4,2,4,1,1,4,1,3,2,2,3,4,1,1,3,2,3,3,4,1,3,4,1,2,4)
# Load in data from the CBS polls in 1988
library (foreign)
polls <- read.dta (here::here('data',
'raw_data',
'election88',
'polls.dta'))
R2OpenBUGS::attach.all(polls)
# Select just the data from the last survey (#9158)
table (survey)                # look at the survey id's
ok <- survey==9158            # define the condition
polls.subset <- polls[ok,]    # select the subset of interest
R2OpenBUGS::attach.all (polls.subset)     # attach the subset
write.table (polls.subset, "polls.subset.dat")
print (polls.subset[1:5,])
# define other data summaries
y <- bush                  # 1 if support bush, 0 if support dukakis
n <- length(y)             # of survey respondents
n.age <- max(age)          # of age categories
n.edu <- max(edu)          # of education categories
n.state <- max(state)      # of states
n.region <- max(region)    # of regions
# compute unweighted and weighted averages for the U.S.
ok <- !is.na(y)                                    # remove the undecideds
cat ("national mean of raw data:", round (mean(y[ok]==1), 3), "\n")
cat ("national weighted mean of raw data:",
round (sum((weight*y)[ok])/sum(weight[ok]), 3), "\n")
# compute weighted averages for the states
raw.weighted <- rep (NA, n.state)
names (raw.weighted) <- state.abbr
for (i in 1:n.state){
ok <- !is.na(y) & state==i
raw.weighted[i] <- sum ((weight*y)[ok])/sum(weight[ok])
}
# load in 1988 election data as a validation check
election88 <- read.dta (here::here('data',
'raw_data',
'election88',
'election88.dta'))
outcome <- election88$electionresult
# load in 1988 census data
census <- haven::read_dta(here::here('data',
'raw_data',
'election88',
'census88.dta'))
# also include a measure of previous vote as a state-level predictor
library (foreign)
presvote <- read.dta (here::here('data',
'raw_data',
'election88',
'presvote.dta'))
attach (presvote)
v.prev <- presvote$g76.84pr
not.dc <- c(1:8,10:51)
candidate.effects <- read.table ("candidate_effects.dat", header=T)
